#!/bin/bash

print_help () {
    echo Usage: 
    echo \ aamgr -s [config name] [-v] 
    echo \ aamgr -gk [server name] [-v] 
    echo \ aamgr -lL [-v]
    echo -R, --restart-all : restart all servers
    echo -s, --start [config] : start single AA servers in Docker containers
    echo -p, --port [port] : use port [port] for server
    echo  -l, --list-servers : list running servers
    echo  -L, --list-configs : list available server configs
    echo  -k, --kill [server name] : kill server and remove container
    echo -g, --log [server name] : get server logs
    echo -v, --verbose : verbose mode
}

DOCKER="sudo docker"
test ${SERVER_COR_GAMES:=/home/alien/.local/share/cor-games}
test ${GAME_DIRNAME:=arena}
test ${AASERVER_IMAGE:=xulb/aa-server3}

GAME_DIR=$SERVER_COR_GAMES/$GAME_DIRNAME
GAME_DIR=${GAME_DIR//\/\//\/}
SERVER_SHELL="$DOCKER run -t --name byebye --entrypoint /bin/bash $AASERVER_IMAGE -c "

list_running_servers_verbose () {
    $DOCKER ps | sed -ne '1p;/aa-server/p' | sed -e 's/  \+/\t/g' | cut -f 1,5,6,7
}

list_running_servers () {
    list_running_servers_verbose | sed -e '1d' | cut -f 4
}

pull_server_log () {
    $DOCKER logs $1
}

list_available_configs () {
    $SERVER_SHELL "ls -1 $GAME_DIR" | grep \.cfg 
    $DOCKER rm byebye > /dev/null
}

cat_server_config () {
    CONFIG=$1
    $SERVER_SHELL "cat $GAME_DIR/$CONFIG"
    $DOCKER rm byebye > /dev/null
}

start_server_on_port () {
    CONFIG=$1
    PORT=$2
    NAME=${CONFIG/.cfg/}
    if list_running_servers | grep -q $NAME 
    then
	echo "Server '$NAME' is already running. Stop."
	exit 1
    fi
    $DOCKER run -dt --name $NAME -p $PORT:$PORT/udp $AASERVER_IMAGE $CONFIG
}


stop_server () {
    $DOCKER stop $1
}

restart_server () {
    $DOCKER restart $1
}

restart_all () {
    SVRS=`list_running_servers`
    for i in $SVRS 
    do
	restart_server $i
    done
}

kill_server () {
    $DOCKER kill $1
    $DOCKER rm $1
}

OPTSTR=Rhs:lLk:g:p:v
LONGOPTSTR=help,start:,list-servers,list-configs,kill:,logs:,verbose,restart-all
TEMP=`getopt -o $OPTSTR --long $LONGOPTSTR -- "$@"`
if [ $? != 0 ] ; then print_help ; exit 2 ; fi

if echo $TEMP | grep -q -- "-v" ; then VERBOSE=1 ; fi
if echo $TEMP | grep -q -- "\--verbose" ; then VERBOSE=1 ; fi

eval set -- "$TEMP"

if [ $1 = '--' ] ; then print_help ; exit ; fi
while true ; do
    case "$1" in
	-h|--help) print_help ; exit ;;
	-v|--verbose) shift ;;
	-s|--start) CONFIG=$2 ; SERVER_START=1 ; shift 2 ;;
	-p|--port) PORT=$2 ; SERVER_START=1 ; shift 2 ;;
	-l|--list-servers) 
	    if [ $VERBOSE ] ;
	    then list_running_servers_verbose ;
	    else list_running_servers ; 
	    fi ; break ;;
	-L|--list-configs) list_available_configs ; break ;;
	-g|--logs) SERVER=$2 ; pull_server_log $SERVER ; shift 2 ; break ;;
	-k|--kill) SERVER=$2 ; kill_server $SERVER ; shift 2 ;;
	-R|--restart-all) restart_all ; shift ;;
	--) shift ; break ;;
	*) echo Option not recognized : $1 ; shift ;;
    esac
done

if [ $SERVER_START ] 
then
    if [[ ! $CONFIG =~ \.cfg$ ]]
    then
	CONFIG=$CONFIG.cfg
    fi
    if [[ ! $(list_available_configs) =~ $CONFIG ]]
    then 
	echo "Config '$CONFIG' not available. Stop." 
	exit 1 
    fi
    
    if [ -z $PORT ]
    then 
       PORT=$(cat_server_config $CONFIG | grep "set port" | cut -d" " -f 3 | \
	   sed -e 's/\([0-9]*\).*/\1/')
    fi
    if [[ $PORT =~ ^[0-9]+$ ]]
    then
	start_server_on_port $CONFIG $PORT
	echo "Started $CONFIG on port $PORT"
    else
	echo "Port $PORT not valid. Stop." ; 
	exit 1 
    fi
fi
    

	    
